{"version":3,"sources":["components/square.js","components/board.js","components/history.js","components/game.js","App.js","index.js"],"names":["Square","value","onClick","isHighlight","className","style","fontWeight","color","RenderSquare","squares","index","calculateStepsCausedWin","lines","i","length","a","b","c","Board","boardSize","stepsCausedWin","detail","row","j","includes","push","findLocation","isNaN","HistoryList","history","stepNumber","isAscendingOrder","sliderButtonClick","handleCurrentMoveClick","move","moves","map","step","col","desc","orderedMoves","reverse","type","name","event","handleSliderButtonClick","checked","reversed","Game","useState","setBoardSize","setIsAscendingOrder","Array","fill","setHistory","setStepNumber","xIsNext","setXIsNext","useEffect","console","log","status","currentSquares","winner","calculateWinner","result","curHistory","slice","concat","onSubmit","preventDefault","newSize","parseInt","target","changeBoardSize","defaultValue","placeholder","required","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c9d93ed.chunk.js","sourcesContent":["import '../index';\r\n\r\nconst Square = ({value,onClick,isHighlight}) => {\r\n    return (\r\n      <button className=\"square\" onClick={onClick} style={isHighlight?{fontWeight:'bold',color:'red'}:{}}>\r\n        {value}\r\n      </button>\r\n    );\r\n}\r\n\r\nexport default Square;\r\n","import Square from './square';\r\n\r\n\r\nconst Board =({squares, boardSize, onClick}) => {\r\n  const stepsCausedWin=calculateStepsCausedWin(squares);\r\n  let detail=[];\r\n  for(var i =0;i<3;i++)\r\n  {\r\n    let row=[];\r\n    for(var j=0;j<3;j++)\r\n    {\r\n      const value= 3*i+j;\r\n      const isHighlight=(stepsCausedWin.includes(value))? true: false;\r\n      row.push((RenderSquare(squares, value ,isHighlight, onClick)));\r\n    }\r\n    detail.push(<div className=\"board-row\">{row}</div>);\r\n  }\r\n  return (\r\n    <div>\r\n      {detail}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst RenderSquare = (squares, index, isHighlight,onClick) => {\r\n  return (\r\n    <Square isHighlight={isHighlight}\r\n      value={squares[index]}\r\n      onClick={() => onClick(index)}\r\n      key={'square '+ index}\r\n    />\r\n  );\r\n}\r\n\r\nconst  calculateStepsCausedWin = (squares)=>\r\n{\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return [a,b,c];\r\n    }\r\n  }\r\n  return [];\r\n}\r\n\r\nexport default Board;","\r\n\r\nconst  HistoryList = ({history, stepNumber, isAscendingOrder, onClick, sliderButtonClick})=>\r\n{\r\n    const handleCurrentMoveClick=(move)=>\r\n    {\r\n        onClick(move);\r\n    }\r\n\r\n    const handleSliderButtonClick=(event)=>\r\n    {\r\n        sliderButtonClick(event);\r\n    }\r\n\r\n    const moves = history.map((step, move) => {\r\n        const [row,col]=findLocation(step.index);\r\n        const desc = move ?\r\n        'Go to move #' + move +'('+row+','+col+')':\r\n        'Go to game start';\r\n        return (\r\n        <li key={move}>\r\n            <button style={stepNumber===move?{fontWeight:'bold'}:{}} onClick={()=> handleCurrentMoveClick(move)}>{desc}</button>\r\n        </li>\r\n        );\r\n    });\r\n    const orderedMoves= !isAscendingOrder?moves.reverse():moves;\r\n\r\n    return(\r\n        <div>\r\n        <label className=\"switch\">\r\n            <input type=\"checkbox\" name=\"orderSlider\" onClick={(event)=>handleSliderButtonClick(event)} checked={isAscendingOrder}/>\r\n            <span className=\"slider\"></span>\r\n        </label>\r\n        <label><br/>Order (Ascending by default)</label>\r\n        <ol reversed={!isAscendingOrder}>{orderedMoves}</ol>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst findLocation = (index) =>{\r\n  const location=[[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]];\r\n\r\n  if(index===-1||isNaN(index))\r\n    return [-1,-1];\r\n  return location[index];\r\n}\r\n\r\nexport default HistoryList;","import React, {useState,useEffect} from 'react';\r\nimport Board from './board';\r\nimport HistoryList from './history';\r\nimport '../index.css';\r\n \r\nconst  Game = () => {\r\n    const [boardSize, setBoardSize] = useState(3);\r\n    const [isAscendingOrder, setIsAscendingOrder] = useState(true);\r\n    const [history, setHistory] = useState([\r\n        {\r\n          squares: Array(9).fill(null),\r\n          index:-1\r\n        }\r\n      ]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    \r\n    useEffect(() => {\r\n      const arraySize = boardSize*boardSize;\r\n      setHistory([\r\n        {\r\n          squares: Array(arraySize).fill(null),\r\n          index:-1\r\n        }\r\n      ]);\r\n      setStepNumber(0);\r\n      setXIsNext(true);\r\n      setIsAscendingOrder(true);\r\n      console.log(boardSize);\r\n    }, [boardSize]);\r\n\r\n    const handleClick = (i) => {\r\n      const curHistory = history.slice(0, stepNumber + 1);\r\n      const current = curHistory[curHistory.length-1];\r\n      const squares = current.squares.slice();\r\n      if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] =xIsNext ? \"X\" : \"O\";\r\n      setHistory((history)=>\r\n        history.concat([\r\n          {\r\n            squares: squares,\r\n            index:i\r\n          }\r\n        ]),\r\n      );\r\n      setStepNumber(curHistory.length);\r\n      setXIsNext(!xIsNext);\r\n    }\r\n  \r\n    const jumpTo= (step) =>{\r\n        setStepNumber(step);\r\n        setXIsNext((step % 2) === 0);\r\n    }\r\n  \r\n    const handleOrderSlider=(event)=>\r\n    {\r\n      setIsAscendingOrder(event.target.checked);\r\n    }\r\n    \r\n    const playAgain = () => \r\n    {\r\n      setHistory([\r\n        {\r\n          squares: Array(9).fill(null),\r\n          index:-1\r\n        }\r\n      ]);\r\n      setStepNumber(0);\r\n      setXIsNext(true);\r\n      setIsAscendingOrder(true);\r\n    }\r\n\r\n    const changeBoardSize = (event) =>\r\n    {\r\n      event.preventDefault();\r\n      const newSize=parseInt(event.target.newSize.value);\r\n      if(!isNaN(newSize))\r\n        setBoardSize(newSize);\r\n    }\r\n\r\n    const currentSquares = history[stepNumber];\r\n    const winner = calculateWinner(currentSquares.squares);\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    let result='';\r\n    if(isDraw(currentSquares.squares)){\r\n      result='Draw!!';\r\n    }\r\n\r\n    return (\r\n    <div className=\"game\">\r\n        <div className=\"game-board\">\r\n            <Board \r\n                squares={currentSquares.squares}\r\n                onClick={handleClick}\r\n                key={'grame-board '+stepNumber}\r\n            />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <div>{result}</div>\r\n          <br/>\r\n          <form onSubmit = {(event) =>changeBoardSize(event)}>\r\n            <input type = 'text' \r\n                  name = 'newSize'\r\n                  defaultValue='3'\r\n                  placeholder='Type your board size here...' \r\n                  required/>\r\n            <br/><br/>\r\n            <button>Render new board</button>\r\n          </form>\r\n          <br/>\r\n          <button onClick = {playAgain}>Play again</button>\r\n          <br/><br/>\r\n\r\n          <HistoryList history={history}                         \r\n                      stepNumber={stepNumber} \r\n                      isAscendingOrder={isAscendingOrder} \r\n                      onClick={jumpTo} \r\n                      sliderButtonClick={handleOrderSlider}/>\r\n        </div>\r\n        \r\n    </div>\r\n    \r\n    );\r\n}\r\n\r\nexport default Game;\r\n  \r\n\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\nfunction isDraw(squares)\r\n{\r\n  return !squares.includes(null);\r\n}","import Game from './components/game';\r\nimport './index.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Game/>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}